var _user$project$Main$familyMemberToString = function (person) {
	var _p0 = person;
	switch (_p0.ctor) {
		case 'All':
			return 'All';
		case 'Sr':
			return 'Trump';
		case 'Jr':
			return 'Junior';
		case 'Ivanka':
			return 'Ivanka';
		case 'Jared':
			return 'Jared';
		case 'Melania':
			return 'Melania';
		default:
			return 'Eric';
	}
};
var _user$project$Main$familyMemberRadio = F3(
	function (value, isChecked, msg) {
		return A2(
			_elm_lang$html$Html$label,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'padding', _1: '20px'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('radio'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$name('familyMember'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(msg),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$checked(isChecked),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(value),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Main$drawSources = function (conflict) {
	var drawSourceRow = function (source) {
		return A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '150px'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(source.link),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(source.name),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '80px'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(source.date),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	};
	var _p1 = conflict;
	if (_p1.ctor === 'Nothing') {
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(''),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		};
	} else {
		return A2(_elm_lang$core$List$map, drawSourceRow, _p1._0.sources);
	}
};
var _user$project$Main$isSelected = F2(
	function (selectedConflict, conflict) {
		var _p2 = selectedConflict;
		if (_p2.ctor === 'Nothing') {
			return false;
		} else {
			return _elm_lang$core$Native_Utils.eq(_p2._0, conflict);
		}
	});
var _user$project$Main$sourcePaneStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'width', _1: '380px'},
			_1: {ctor: '[]'}
		}
	});
var _user$project$Main$conflictPaneStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
		_1: {ctor: '[]'}
	});
var _user$project$Main$filterBySearch = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			selectedList: A2(
				_elm_lang$core$List$filter,
				function (record) {
					return A2(
						_elm_lang$core$String$contains,
						_elm_lang$core$String$toUpper(model.searchString),
						_elm_lang$core$String$toUpper(
							A2(_elm_lang$core$Basics_ops['++'], record.conflictingEntity, record.description)));
				},
				model.conflictList)
		});
};
var _user$project$Main$clearFilter = function (model) {
	return model;
};
var _user$project$Main$Model = F5(
	function (a, b, c, d, e) {
		return {conflictList: a, selectedList: b, selectedConflict: c, selectedFamilyMember: d, searchString: e};
	});
var _user$project$Main$Eric = {ctor: 'Eric'};
var _user$project$Main$Melania = {ctor: 'Melania'};
var _user$project$Main$Jared = {ctor: 'Jared'};
var _user$project$Main$Ivanka = {ctor: 'Ivanka'};
var _user$project$Main$Jr = {ctor: 'Jr'};
var _user$project$Main$Sr = {ctor: 'Sr'};
var _user$project$Main$All = {ctor: 'All'};
var _user$project$Main$initModel = {conflictList: _user$project$Data$conflictList, selectedList: _user$project$Data$conflictList, selectedConflict: _elm_lang$core$Maybe$Nothing, selectedFamilyMember: _user$project$Main$All, searchString: ''};
var _user$project$Main$stringToFamilyMember = function (person) {
	var _p3 = person;
	switch (_p3) {
		case 'All':
			return _user$project$Main$All;
		case 'Trump':
			return _user$project$Main$Sr;
		case 'Junior':
			return _user$project$Main$Jr;
		case 'Ivanka':
			return _user$project$Main$Ivanka;
		case 'Jared':
			return _user$project$Main$Jared;
		case 'Melania':
			return _user$project$Main$Melania;
		case 'Eric':
			return _user$project$Main$Eric;
		default:
			return _user$project$Main$Sr;
	}
};
var _user$project$Main$filterByFamilyMember = function (model) {
	var _p4 = model.selectedFamilyMember;
	if (_p4.ctor === 'All') {
		return model;
	} else {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				selectedList: A2(
					_elm_lang$core$List$filter,
					function (record) {
						return _elm_lang$core$Native_Utils.eq(
							_user$project$Main$stringToFamilyMember(record.familyMember),
							model.selectedFamilyMember);
					},
					model.selectedList)
			});
	}
};
var _user$project$Main$filterConflicts = function (model) {
	return _user$project$Main$filterByFamilyMember(
		_user$project$Main$filterBySearch(model));
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p5 = msg;
		switch (_p5.ctor) {
			case 'Search':
				return _user$project$Main$filterConflicts(
					_elm_lang$core$Native_Utils.update(
						model,
						{searchString: _p5._0}));
			case 'SelectConflict':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						selectedConflict: _elm_lang$core$Maybe$Just(_p5._0)
					});
			case 'ChooseFamilyMember':
				return _user$project$Main$filterConflicts(
					_elm_lang$core$Native_Utils.update(
						model,
						{selectedFamilyMember: _p5._0}));
			default:
				return _user$project$Main$filterConflicts(
					_elm_lang$core$Native_Utils.update(
						model,
						{searchString: '', selectedFamilyMember: _user$project$Main$All}));
		}
	});
var _user$project$Main$Clear = {ctor: 'Clear'};
var _user$project$Main$ChooseFamilyMember = function (a) {
	return {ctor: 'ChooseFamilyMember', _0: a};
};
var _user$project$Main$SelectConflict = function (a) {
	return {ctor: 'SelectConflict', _0: a};
};
var _user$project$Main$drawConflictRows = F2(
	function (conflicts, selectedConflict) {
		var drawConflictRow = function (conflict) {
			return A2(
				_elm_lang$html$Html$tr,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_user$project$Main$SelectConflict(conflict)),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '70px'},
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$classList(
									{
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'selected',
											_1: A2(_user$project$Main$isSelected, selectedConflict, conflict)
										},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(conflict.familyMember),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '70px'},
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$classList(
										{
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'selected',
												_1: A2(_user$project$Main$isSelected, selectedConflict, conflict)
											},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(conflict.category),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '100px'},
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$classList(
											{
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'selected',
													_1: A2(_user$project$Main$isSelected, selectedConflict, conflict)
												},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(conflict.conflictingEntity),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '400px'},
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$classList(
												{
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'selected',
														_1: A2(_user$project$Main$isSelected, selectedConflict, conflict)
													},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(conflict.description),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				});
		};
		return A2(_elm_lang$core$List$map, drawConflictRow, conflicts);
	});
var _user$project$Main$Search = function (a) {
	return {ctor: 'Search', _0: a};
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$table,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'xx-large'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Tracking Trump\'s Conflicts of Interest'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$tr,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('text'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$placeholder('Search'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(model.searchString),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$Search),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(
														_elm_lang$core$List$length(model.selectedList)),
													' Conflicts')),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$td,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$button,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Clear),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Clear'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$td,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$fieldset,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A3(
																_user$project$Main$familyMemberRadio,
																'All',
																_elm_lang$core$Native_Utils.eq(model.selectedFamilyMember, _user$project$Main$All),
																_user$project$Main$ChooseFamilyMember(_user$project$Main$All)),
															_1: {
																ctor: '::',
																_0: A3(
																	_user$project$Main$familyMemberRadio,
																	'Trump',
																	_elm_lang$core$Native_Utils.eq(model.selectedFamilyMember, _user$project$Main$Sr),
																	_user$project$Main$ChooseFamilyMember(_user$project$Main$Sr)),
																_1: {
																	ctor: '::',
																	_0: A3(
																		_user$project$Main$familyMemberRadio,
																		'Jr',
																		_elm_lang$core$Native_Utils.eq(model.selectedFamilyMember, _user$project$Main$Jr),
																		_user$project$Main$ChooseFamilyMember(_user$project$Main$Jr)),
																	_1: {
																		ctor: '::',
																		_0: A3(
																			_user$project$Main$familyMemberRadio,
																			'Ivanka',
																			_elm_lang$core$Native_Utils.eq(model.selectedFamilyMember, _user$project$Main$Ivanka),
																			_user$project$Main$ChooseFamilyMember(_user$project$Main$Ivanka)),
																		_1: {
																			ctor: '::',
																			_0: A3(
																				_user$project$Main$familyMemberRadio,
																				'Jared',
																				_elm_lang$core$Native_Utils.eq(model.selectedFamilyMember, _user$project$Main$Jared),
																				_user$project$Main$ChooseFamilyMember(_user$project$Main$Jared)),
																			_1: {
																				ctor: '::',
																				_0: A3(
																					_user$project$Main$familyMemberRadio,
																					'Melania',
																					_elm_lang$core$Native_Utils.eq(model.selectedFamilyMember, _user$project$Main$Melania),
																					_user$project$Main$ChooseFamilyMember(_user$project$Main$Melania)),
																				_1: {
																					ctor: '::',
																					_0: A3(
																						_user$project$Main$familyMemberRadio,
																						'Eric',
																						_elm_lang$core$Native_Utils.eq(model.selectedFamilyMember, _user$project$Main$Eric),
																						_user$project$Main$ChooseFamilyMember(_user$project$Main$Eric)),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$tr,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{
									ctor: '::',
									_0: _user$project$Main$conflictPaneStyle,
									_1: {ctor: '[]'}
								},
								A2(_user$project$Main$drawConflictRows, model.selectedList, model.selectedConflict)),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{
										ctor: '::',
										_0: _user$project$Main$sourcePaneStyle,
										_1: {ctor: '[]'}
									},
									_user$project$Main$drawSources(model.selectedConflict)),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$beginnerProgram(
	{model: _user$project$Main$initModel, view: _user$project$Main$view, update: _user$project$Main$update})();
